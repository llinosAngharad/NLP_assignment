<0.21.4.92.11.15.11.lydia+@proof.ergo.cs.cmu.edu (lydia defilippo).0>
type:     cmu.cs.scs
who:      <speaker>leslie lamport</speaker>
          digital equipment corporation
          systems research center
topic:    the temporal logic of actions
dates:    28-apr-92
time:     <stime>3:30 pm</stime>
place:    <location>wean hall 4623</location>
postedby: lydia+ on 21-apr-92 at 11:15 from proof.ergo.cs.cmu.edu (lydia defilippo)
abstract: 


				special seminar

 speaker:  <speaker>leslie lamport</speaker>
           digital equipment corporation
           systems research center

 date:     tuesday, april 28
 time:     <stime>3:30 pm</stime>
 place:    <location>wean hall 4623</location>
 topic:    the temporal logic of actions

traditional verification employs a programming language for writing the 
program, and a logic for expressing its properties.  when verifying 
concurrent programs, we reason about an abstract program that is not meant 
to be directly compiled and executed, so we don't have to use a programming 
language.  contrary to what one might conclude from the literature, logic 
can be simpler than programming languages.  with the right logic, it is 
easy to express a program as a logical formula.  the distinction between 
properties and programs then vanishes, and specifications can be written 
as simple programs.  proving that one program implements another is no 
different from proving that a program satisfies a property.

the temporal logic of actions is the right logic.  it provides a tool that 
can help us cope with the complexity of verifying real concurrent algorithms.

no previous fondess for logic is assumed.
